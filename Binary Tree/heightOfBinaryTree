// basically finding height/depth is also known traversal because it is preorder traversal//

public int height(Node root){
if(root==null){
return 0;
}
int leftHeight= height(root.left);
int rightHeight= height(root.right);
int total= Math.max(leftHeight, rightHight) + 1;
return total;

}
//time complexity is O(n) where n is no. of nodes
//space complexity is O(n)
-----------------------------------------------------------------------------  OR  ------------------------------------------------------------------------------------------------

class Solution {
    int height(Node node) 
    {
        if(node==null) return 0;
        return Math.max(height(node.left), height(node.right)) + 1;
        
    }
}
